- name: Initialize everything
  gather_facts: False
  hosts: localhost
  vars_prompt:
    - name: droplet_number
      prompt: How many virtual machines do you want to set up?
      private: false
      default: "1"
  tasks:
    - name: Create a new Droplet
      community.digitalocean.digital_ocean_droplet:
        state: active
        name: "droplet-{{ item }}"
        size: s-1vcpu-2gb
        region: fra1
        image: ubuntu-20-04-x64
        wait_timeout: 500
        # Note: those are IDs of the keys in our account
        # These don't give you access anywhere, unless you control the account
        # This is why whe keep this checked in. The API key,
        # which does give you control over the DO account, is passed via environment
        # variables.
        ssh_keys: [
            "38713791", # Artem's key
            "37677128", # Arseniy's key
            "30991602", # Arseniy's home key
          ]
        unique_name: true
      register: created_droplets
      with_sequence: "{{ droplet_number }}"

    - name: Add the newly created droplet(s) to the group of Ansible hosts
      ansible.builtin.add_host:
        name: "{{ item.data.droplet.name }}"
        ansible_host: "{{ (item.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}"
        ansible_user: root
        groups:
          - virtualmachines
      with_items: "{{ created_droplets.results }}"

    # We use a reserved domain since DNS takes a bit of time to update
    # - name: "Attach our reserved IP to the first droplet for the main domain to function"
    #   community.digitalocean.digital_ocean_floating_ip:
    #     state: attached
    #     ip: "{{ lookup('ansible.builtin.env', 'RESERVED_IP') }}"
    #     droplet_id: "{{ created_droplets.results[0].data.droplet.id }}"

- name: "Installation steps on the machine"
  hosts: virtualmachines
  tasks:
    - name: Wait for ssh to come up
      wait_for:
        host: "{{ ansible_ssh_host }}"
        port: 22
        delay: 15
        timeout: 30

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      register: docker_result
      until: docker_result is succeeded
      retries: 3
      delay: 5
      failed_when: docker_result is failure

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - docker-ce
        state: latest
        update_cache: true
      become: true

    - name: Install Python modules
      pip:
        name:
          - pyOpenSSL
          - docker
          - docker-compose
        state: latest

    - name: copy Docker Compose files
      copy:
        src: "docker-compose.yaml"
        dest: "/deploy/"

    - name: Create directories for certificates
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /certs
        - /certs/traefik
        - /certs/mysql
        - /certs/pma

    # Creating a self-signed certificate for traefik
    - name: Create private key for traefik (RSA, 4096 bits)
      community.crypto.openssl_privatekey:
        path: /certs/traefik/certificate.key

    - name: Create simple self-signed certificate for traefik
      community.crypto.x509_certificate:
        path: /certs/traefik/certificate.pem
        mode: "0744"
        privatekey_path: /certs/traefik/certificate.key
        provider: selfsigned

    # Create a CA
    - name: Create private key with password protection
      community.crypto.openssl_privatekey:
        path: /certs/ca-certificate.key
        cipher: auto
        passphrase: "{{ lookup('ansible.builtin.password', 'credentials/' + '/ca-certificate-passphrase', length=15) }}"

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: /certs/ca-certificate.key
        privatekey_passphrase: "{{ lookup('ansible.builtin.password', 'credentials/' + '/ca-certificate-passphrase', length=15) }}"
        common_name: CloudOne SA
        use_common_name_for_san: false # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - "CA:TRUE"
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: /certs/ca-certificate.pem
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: /certs/ca-certificate.key
        privatekey_passphrase: "{{ lookup('ansible.builtin.password', 'credentials/' + '/ca-certificate-passphrase', length=15) }}"
        provider: selfsigned

    # Create cert for mysql
    - name: Create private key for new certificate (mysql)
      community.crypto.openssl_privatekey:
        path: /certs/mysql/certificate.key
        mode: "0744"

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: /certs/mysql/certificate.key
        common_name: db
        country_name: FR
        organization_name: CloudOne
        email_address: admin@cloudone.space
      run_once: true
      register: csr

    - name: Sign certificate with our CA
      community.crypto.x509_certificate:
        path: /certs/mysql/certificate.pem
        mode: "0744"
        csr_content: "{{ csr.csr }}"
        privatekey_path: /certs/mysql/certificate.key
        provider: ownca
        ownca_path: /certs/ca-certificate.pem
        ownca_privatekey_path: /certs/ca-certificate.key
        ownca_privatekey_passphrase: "{{ lookup('ansible.builtin.password', 'credentials/' + '/ca-certificate-passphrase', length=15) }}"
        ownca_not_after: +365d # valid for one year
        ownca_not_before: "-1d" # valid since yesterday

    # Create cert for phpmyadmin
    - name: Create private key for new certificate (pma)
      community.crypto.openssl_privatekey:
        path: /certs/pma/certificate.key
        mode: "0744"

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: /certs/pma/certificate.key
      run_once: true
      register: csr

    - name: Sign certificate with our CA
      community.crypto.x509_certificate:
        path: /certs/pma/certificate.pem
        mode: "0744"
        csr_content: "{{ csr.csr }}"
        privatekey_path: /certs/pma/certificate.key
        provider: ownca
        ownca_path: /certs/ca-certificate.pem
        ownca_privatekey_path: /certs/ca-certificate.key
        ownca_privatekey_passphrase: "{{ lookup('ansible.builtin.password', 'credentials/' + '/ca-certificate-passphrase', length=15) }}"
        ownca_not_after: +365d # valid for one year
        ownca_not_before: "-1d" # valid since yesterday

    # Send configuration files to the machine
    - name: Copy configuration
      copy:
        src: configuration
        dest: /

    - name: Deploy Docker Compose
      community.docker.docker_compose:
        recreate: always
        project_src: /deploy/
        files:
          - docker-compose.yaml
      environment:
        WORDPRESS_DB_PASSWORD: "{{ lookup('ansible.builtin.password', 'credentials/' + '/wordpresspassword', length=15) }}"
        MYSQL_ROOT_PASSWORD: "{{ lookup('ansible.builtin.password', 'credentials/' + '/mysqlpassword', length=15) }}"

    - name: Run WP installer and create DB
      community.docker.docker_container:
        name: wordpress-db-creator
        image: wordpress:cli
        command: ["wp", "db", "create"]
        networks:
          - name: deploy_wpsite
        env:
          WORDPRESS_DB_HOST: "db:3306"
          WORDPRESS_DB_USER: "wordpress"
          WORDPRESS_DB_PASSWORD: "{{ lookup('ansible.builtin.password', 'credentials/' + '/wordpresspassword', length=15) }}"
        volumes:
          - "/deploy/:/var/www/html"
      register: result

    - name: Wait for wordpress to come up
      wait_for:
        host: "{{ ansible_ssh_host }}"
        port: 80
        delay: 10
        timeout: 30

    - name: Run WP installer and install WP
      community.docker.docker_container:
        name: wordpress-installer
        image: wordpress:cli
        command:
          [
            "wp",
            "core",
            "install",
            "--url=https://cloudone.space/wp",
            "--title=cloudone",
            "--admin_user=blash",
            "--admin_password={{ lookup('ansible.builtin.password', 'credentials/' + '/wpadminpassword', length=15) }}",
            "--admin_email=info@wp-cli.org",
          ]
        networks:
          - name: deploy_wpsite
        env:
          WORDPRESS_DB_HOST: "db:3306"
          WORDPRESS_DB_USER: "wordpress"
          WORDPRESS_DB_PASSWORD: "{{ lookup('ansible.builtin.password', 'credentials/' + '/wordpresspassword', length=15) }}"
        volumes:
          - "/deploy/:/var/www/html"
      register: result

    - name: Create a subdomain for every droplet (useful if we have many machines)
      community.general.cloudflare_dns:
        zone: cloudone.space
        record: "{{ inventory_hostname }}"
        type: A
        value: "{{ ansible_ssh_host }}"
        api_token: "{{ lookup('ansible.builtin.env', 'CLOUDFLARE_API_TOKEN') }}"
        proxied: true
        solo: true

    - name: Show instructions to connect
      ansible.builtin.debug:
        msg:
          - "All done! You can connect to the server on {{ ansible_ssh_host }}"
          - "MySQL root password: {{ lookup('ansible.builtin.password', 'credentials/' + '/mysqlpassword', length=15) }}"
          - "Wordpress DB password: {{ lookup('ansible.builtin.password', 'credentials/' + '/wordpresspassword', length=15) }}"
          - "Wordpress admin user: blash"
          - "Wordpress admin password: {{ lookup('ansible.builtin.password', 'credentials/' + '/wpadminpassword', length=15) }}"
          - "PHPMyAdmin login: wordpress"
          - "PHPMyAdmin password: {{ lookup('ansible.builtin.password', 'credentials/' + '/wordpresspassword', length=15) }}"
